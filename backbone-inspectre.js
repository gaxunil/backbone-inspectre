// Generated by CoffeeScript 1.6.2
(function() {
  var App,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = App || {};

  App.BackboneInspectre = (function() {
    function BackboneInspectre(options) {
      this.issueReport = __bind(this.issueReport, this);
      this.checkDone = __bind(this.checkDone, this);      this.checkTimer = null;
      this.queue = [];
      this.ignoreList = [];
      this.logPoints = [];
      this.running = false;
      this.verbose = (options != null ? options.verbose : void 0) || false;
      this.doneTiming = (options != null ? options.doneTiming : void 0) || 1500;
      this.analyticsLogger = options.logger || null;
    }

    BackboneInspectre.prototype.start = function(name, url) {
      this.cleanup();
      this.runName = name;
      this.url = url;
      return this.running = true;
    };

    BackboneInspectre.prototype.stop = function() {
      return this.running = false;
    };

    BackboneInspectre.prototype.isRunning = function() {
      return this.running;
    };

    BackboneInspectre.prototype.addLogPoint = function(name, func) {
      return this.logPoints.push({
        logged: false,
        name: name,
        func: func
      });
    };

    BackboneInspectre.prototype.log = function() {
      if (this.verbose) {
        return console.log(arguments);
      }
    };

    BackboneInspectre.prototype.ignore = function(constructorName) {
      return this.ignoreList.push(constructorName);
    };

    BackboneInspectre.prototype.isIgnored = function(constructorName) {
      var ret;

      ret = _.contains(this.ignoreList, constructorName);
      if (ret) {
        this.log("ignoring ", constructorName);
      }
      return ret;
    };

    BackboneInspectre.prototype.inspect = function(proto, funcName, label) {
      var func, mythis;

      mythis = this;
      func = proto[funcName];
      return proto[funcName] = function() {
        return mythis.theSpy(this, arguments, func, label);
      };
    };

    BackboneInspectre.prototype.theSpy = function(that, args, func, label) {
      var ret;

      if (this.running && !this.isIgnored(that.constructor.name)) {
        this.log("BEFORE ", label, that.constructor.name);
        this.addObject(that.collection || that.model);
      }
      ret = func.apply(that, args);
      if (this.running && !this.isIgnored(that.constructor.name)) {
        this.addObject(that.collection || that.model);
        this.log("AFTER ", label);
      }
      return ret;
    };

    BackboneInspectre.prototype.logResults = function(category, url, timeSpent) {
      if (this.analyticsLogger) {
        return this.analyticsLogger.logTiming(category, url, timeSpent, null);
      } else {
        return console.log(category, url, timeSpent);
      }
    };

    BackboneInspectre.prototype.checkLogPoints = function() {
      var _this = this;

      return _.each(this.logPoints, function(lp) {
        var now, timeSpent;

        if (!lp.logged) {
          if (lp.func.apply()) {
            lp.logged = true;
            now = new Date().getTime();
            timeSpent = now - _this.queue[0].timeTag;
            _this.log(_this.runName + " : LOG POINT " + lp.name, lp.name, timeSpent);
            return _this.logResults(_this.runName + " : LOG POINT " + lp.name, lp.name, timeSpent);
          }
        }
      });
    };

    BackboneInspectre.prototype.addObject = function(obj) {
      var rec;

      rec = {};
      rec.timeTag = new Date().getTime();
      rec.obj = obj;
      this.queue.push(rec);
      this.checkLogPoints();
      return this.setDoneTimer();
    };

    BackboneInspectre.prototype.cleanup = function() {
      if (this.checkTimer) {
        clearTimeout(this.checkTimer);
      }
      this.queue = [];
      return this.logPoints = [];
    };

    BackboneInspectre.prototype.setDoneTimer = function() {
      if (this.checkTimer) {
        clearTimeout(this.checkTimer);
      }
      return this.checkTimer = _.delay(this.checkDone, 500);
    };

    BackboneInspectre.prototype.checkDone = function() {
      var delta, elapsed, last, now;

      now = new Date().getTime();
      last = _.last(this.queue);
      if (last) {
        delta = now - last.timeTag;
        this.log("time since last", delta);
        if (delta > this.doneTiming) {
          this.stop();
          this.log(">>>>>>>>>>>>>>>>>>PAGE RENDER DONE");
          elapsed = last.timeTag - this.queue[0].timeTag;
          this.log("RENDER TIME", this.runName, last.timeTag - this.queue[0].timeTag);
          _.delay(this.issueReport, 5000, elapsed);
          return this.cleanup();
        } else {
          return this.setDoneTimer();
        }
      }
    };

    BackboneInspectre.prototype.issueReport = function(elapsed) {
      return this.logResults(this.runName, this.url, elapsed);
    };

    return BackboneInspectre;

  })();

}).call(this);
