// Generated by CoffeeScript 1.6.2
(function() {
  var Result, ResultView, Results, ResultsView, something, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  Result = (function(_super) {
    __extends(Result, _super);

    function Result() {
      _ref = Result.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Result;

  })(Backbone.Model);

  Results = (function(_super) {
    __extends(Results, _super);

    function Results() {
      _ref1 = Results.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Results.prototype.url = 'https://api.github.com/gists?callback=?';

    Results.prototype.model = Result;

    Results.prototype.parse = function(resp) {
      console.log(resp);
      return resp.data;
    };

    return Results;

  })(Backbone.Collection);

  ResultView = (function(_super) {
    __extends(ResultView, _super);

    function ResultView() {
      _ref2 = ResultView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    ResultView.prototype.tagName = 'div';

    ResultView.prototype.render = function() {
      var template;

      template = _.template($('#result-template').html(), this.model.attributes);
      this.$el.html(template);
      return console.log("ITEM RENDERED");
    };

    return ResultView;

  })(Backbone.View);

  ResultsView = (function(_super) {
    __extends(ResultsView, _super);

    function ResultsView() {
      _ref3 = ResultsView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    ResultsView.prototype.tagName = 'div';

    ResultsView.prototype.render = function() {
      var _this = this;

      return this.collection.each(function(result) {
        var item_view;

        item_view = new ResultView({
          model: result
        });
        item_view.render();
        return _this.$el.append(item_view.el);
      });
    };

    return ResultsView;

  })(Backbone.View);

  something = new Results;

  something.fetch().done(function() {
    var results_view;

    console.log(something);
    results_view = new ResultsView({
      el: $('#results'),
      collection: something
    });
    results_view.render();
    return console.log("Render done");
  });

  console.log("OK");

}).call(this);
